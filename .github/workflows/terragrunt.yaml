name: "Terragrunt GitHub Actions"

on:
  pull_request:
    paths:
      - 'clusters/**'
      - '!clusters/_envcommon/**'
      - '!clusters/example/**'
    branches: [ main, test, dev ]
  pull_request_target:
    paths:
      - 'clusters/**'
      - '!clusters/_envcommon/**'
      - '!clusters/example/**'
    types: [closed]
    branches: [ main, test, dev ]
  workflow_dispatch:

env:
  tg_version: "0.67.16"
  tf_version: "1.9.7"
  working_dir: "clusters"

permissions:
  id-token: write
  contents: read

jobs:
  determine_environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_env.outputs.environment }}
    steps:
      - id: set_env
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BRANCH="${{ github.ref_name }}"
          else
            BRANCH="${{ github.base_ref }}"
          fi

          if [[ $BRANCH == "main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ $BRANCH == "test" ]]; then
            echo "environment=test" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  checks:
    needs: determine_environment
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: Check terragrunt HCL
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: "hclfmt --terragrunt-check --terragrunt-diff"

  plan:
    needs: [determine_environment, checks]
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ needs.determine_environment.outputs.environment }}
    env:
      TF_VAR_cloudamqp_apikey: ${{ secrets.CLOUDAMQP_APIKEY }}
      TF_VAR_scylla_token: ${{ secrets.SCYLLA_TOKEN }}
      TF_VAR_github_modules_url: ${{ vars.MODULES_URL }}
      TF_VAR_argocd_repo_token: ${{ secrets.ARGOCD_GITHUB_TOKEN }}
      WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - id: auth
        name: Authenticate with Google Cloud
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: "${{ env.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ secrets.SERVICE_ACCOUNT }}"
          project_id: "${{ vars.PROJECT_ID }}"
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      - name: Use gcloud CLI
        run: gcloud info
      - name: Setup Terragrunt
        uses: eLco/setup-terragrunt@v1.0.3
        with:
          terragrunt_version: ${{ env.tg_version }}
          github_token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
      - name: Init Terragrunt
        run: |
          terragrunt --terragrunt-non-interactive run-all init --terragrunt-working-dir ${{ env.working_dir }}/${{ vars.PROJECT_ID }}
      - name: Plan ${{ vars.PROJECT_ID }} ENV=${{ needs.determine_environment.outputs.environment }} 
        run: |
          terragrunt run-all plan --terragrunt-working-dir ${{ env.working_dir }}/${{ vars.PROJECT_ID }} --terragrunt-include-dir "**/*-${{ needs.determine_environment.outputs.environment }}/**"
        
  deploy:
    needs: [ determine_environment, checks ]
    if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: ${{ needs.determine_environment.outputs.environment }}
    concurrency:
      group: ${{ needs.determine_environment.outputs.environment }}
      cancel-in-progress: false
    env:
      TF_VAR_cloudamqp_apikey: ${{ secrets.CLOUDAMQP_APIKEY }}
      TF_VAR_scylla_token: ${{ secrets.SCYLLA_TOKEN }}
      TF_VAR_github_modules_url: ${{ vars.MODULES_URL }}
      TF_VAR_argocd_repo_token: ${{ secrets.ARGOCD_GITHUB_TOKEN }}
      WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - id: auth
        name: Authenticate with Google Cloud
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.SERVICE_ACCOUNT }}'
          project_id: '${{ vars.PROJECT_ID }}'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      - name: Use gcloud CLI
        run: gcloud info
      - name: Setup Terragrunt
        uses: eLco/setup-terragrunt@v1.0.3
        with:
          terragrunt_version: ${{ env.tg_version }}
          github_token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
      - name: Init Terragrunt
        run: |
          terragrunt --terragrunt-non-interactive run-all init --terragrunt-working-dir ${{ env.working_dir }}/${{ vars.PROJECT_ID }}
      - name: Apply ${{ vars.PROJECT_ID }} ENV=${{ needs.determine_environment.outputs.environment }} 
        run: |
          terragrunt --terragrunt-non-interactive run-all apply -auto-approve --terragrunt-working-dir ${{ env.working_dir }}/${{ vars.PROJECT_ID }} --terragrunt-include-dir "**/*-${{ needs.determine_environment.outputs.environment }}/**"
      - name: Checkout ArgoCD Config Repo
        uses: actions/checkout@v4
        with:
          repository: guicrocetti/argocd-cloud-infra-test
          path: argocd-config
          token: ${{ secrets.ARGOCD_GITHUB_TOKEN }}
      - name: Check and Update ArgoCD Config
        run: |
          # Get cluster info from current deployment
          CLUSTER_NAME=$(terragrunt output -raw cluster_name)
          CLUSTER_ENDPOINT=$(terragrunt output -raw cluster_endpoint)
          
          # Check if cluster already exists in project-0.yaml
          if ! grep -q "server: https://${CLUSTER_ENDPOINT}:6443" "argocd/project-0.yaml" || \
            ! grep -q "name: ${CLUSTER_NAME}" "argocd/project-0.yaml"; then
            
            # Create new branch
            cd argocd
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git config --global user.name "github-actions[bot]"
            
            BRANCH_NAME="add-cluster-${CLUSTER_NAME}"
            git checkout -b $BRANCH_NAME
            
            # Add new cluster config to project-0.yaml
            yq eval -i '.spec.destinations += {"namespace": "*", "server": "https://'${CLUSTER_ENDPOINT}':6443", "name": "'${CLUSTER_NAME}'"}' project-0.yaml
            
            # Create PR
            git add project-0.yaml
            git commit -m "Add new cluster ${CLUSTER_NAME} to ArgoCD configuration"
            git push origin $BRANCH_NAME
            
            gh pr create \
              --title "Add new cluster ${CLUSTER_NAME} to ArgoCD configuration" \
              --body "Automatically adding new cluster ${CLUSTER_NAME} to ArgoCD monitoring" \
              --base main \
              --head $BRANCH_NAME
          else
            echo "Cluster ${CLUSTER_NAME} already exists in ArgoCD configuration"
          fi
