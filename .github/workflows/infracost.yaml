# Infracost runs on pull requests (PR) and posts PR comments.
# If you use Infracost Cloud, Infracost also runs on main branch pushes so the dashboard is updated.
# The GitHub Action docs (https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows) describe other trigger options.
name: Infracost

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "infra/**"
      - "!infra/_envcommon/**"
      - "!infra/example/**"
    branches: [main, test, dev]
  pull_request_target:
    paths:
      - "infra/**"
      - "!infra/_envcommon/**"
      - "!infra/example/**"
    types: [closed]
    branches: [main, test, dev]

env:
  working_dir: "infra/projects"
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  INFRACOST_CURRENCY: EUR
  INFRACOST_CURRENCY_FORMAT: "EUR: 1.234,56â‚¬"
  tg_version: "0.71.2"
  tf_version: "1.10.3"
  TF_VAR_github_modules_url: ${{ vars.MODULES_URL }}
  WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  determine_environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_env.outputs.environment }}
    steps:
      - id: set_env
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BRANCH="${{ github.ref_name }}"
          else
            BRANCH="${{ github.base_ref }}"
          fi

          if [[ $BRANCH == "main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ $BRANCH == "test" ]]; then
            echo "environment=test" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  # This stage runs the Infracost CLI and posts PR comments.
  # It also updates PR comments when the PR is updated (synchronize event).
  infracost-pull-request-checks:
    needs: [determine_environment]
    name: Infracost Pull Request Checks
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
    runs-on: ubuntu-latest
    environment: ${{ needs.determine_environment.outputs.environment }}
    steps:
      # If you use private modules, add an environment variable or secret
      # called GIT_SSH_KEY with your private key, so Infracost CLI can access
      # private repositories (similar to how Terraform/Terragrunt does).
      # - name: add GIT_SSH_KEY
      #   run: |
      #     ssh-agent -a $SSH_AUTH_SOCK
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.GIT_SSH_KEY }}" | tr -d '\r' | ssh-add -
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: "${{ github.event.pull_request.base.ref }}"
      - id: auth
        name: Authenticate with Google Cloud
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: "${{ env.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ secrets.SERVICE_ACCOUNT }}"
          project_id: "${{ vars.PROJECT_ID }}"
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      - name: Use gcloud CLI
        run: gcloud info
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.tf_version }}
      - name: Setup Terragrunt
        uses: eLco/setup-terragrunt@v1.0.3
        with:
          terragrunt_version: ${{ env.tg_version }}
          github_token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
      - name: Init Terragrunt
        run: terragrunt run-all init --upgrade --terragrunt-working-dir ${{ env.working_dir }}
      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Generate Infracost JSON file as the baseline.
      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=./${{ env.working_dir }} \
                              --format=json \
                              --out-file=/tmp/infracost-base.json \
                              --terraform-force-cli

      # Checkout the current PR branch so we can create a diff.
      - name: Checkout PR branch
        uses: actions/checkout@v4

      # Generate an Infracost diff and save it to a JSON file.
      - name: Generate Infracost diff
        run: |
          infracost diff --path=./${{ env.working_dir }} \
                          --format=json \
                          --compare-to=/tmp/infracost-base.json \
                          --out-file=/tmp/infracost.json

      # Posts a comment to the PR using the 'update' behavior.
      # This creates a single comment and updates it. The "quietest" option.
      # The other valid behaviors are:
      #   delete-and-new - Delete previous comments and create a new one.
      #   hide-and-new - Minimize previous comments and create a new one.
      #   new - Create a new cost estimate comment on every push.
      # See https://www.infracost.io/docs/features/cli_commands/#comment-on-pull-requests for other options.
      - name: Post Infracost comment
        run: |
          infracost comment github --path=/tmp/infracost.json \
                                   --repo=$GITHUB_REPOSITORY \
                                   --github-token=${{ github.token }} \
                                   --pull-request=${{ github.event.pull_request.number }} \
                                   --behavior=update

  # Run Infracost on default branch and update Infracost Cloud
  infracost-default-branch-update:
    needs: [determine_environment]
    # If you use private modules, or store Terraform variables or modules in a 3rd party
    # such as TFC or Spacelift, include the same steps/variables as the infracost-pull-request-checks job
    name: Infracost Default Branch Update
    environment: ${{ needs.determine_environment.outputs.environment }}
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && contains(fromJSON('["main", "test", "dev"]'), github.ref_name)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
      - id: auth
        name: Authenticate with Google Cloud
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: "${{ env.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ secrets.SERVICE_ACCOUNT }}"
          project_id: "${{ vars.PROJECT_ID }}"
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      - name: Use gcloud CLI
        run: gcloud info
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.tf_version }}
      - name: Setup Terragrunt
        uses: eLco/setup-terragrunt@v1.0.3
        with:
          terragrunt_version: ${{ env.tg_version }}
          github_token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
      - name: Init Terragrunt
        run: terragrunt run-all init --upgrade --terragrunt-working-dir ${{ env.working_dir }}
      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Run Infracost on default branch and update Infracost Cloud
        run: |
          infracost breakdown --path=./${{ env.working_dir }} \
                    --format=json \
                    --out-file=infracost.json \
                    --terraform-force-cli

          infracost upload --path=infracost.json || echo "Always pass main branch runs even if there are policy failures"

  # Update PR status in Infracost Cloud
  infracost-pull-request-status-update:
    needs: [determine_environment]
    name: Infracost PR Status Update
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    environment: ${{ needs.determine_environment.outputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Infracost PR Status Update
        run: |
          PR_STATUS="MERGED"
          if [[ ${{ github.event.pull_request.merged }} = false ]]; then PR_STATUS="CLOSED"; fi

          echo "Updating status of ${{ github.event.pull_request.html_url }} to $PR_STATUS"
          curl -i \
            --request POST \
            --header "Content-Type: application/json" \
            --header "X-API-Key: $INFRACOST_API_KEY" \
            --data "{ \"query\": \"mutation {updatePullRequestStatus( url: \\\"${{ github.event.pull_request.html_url }}\\\", status: $PR_STATUS )}\" }" \
            "https://dashboard.api.infracost.io/graphql";
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
